services:
    api-gateway:
        build:
            context: ./../api_gateway
        ports:
            - "8080:80"
        depends_on:
            - book-service
            - author-service
            - category-service
            - user-service
        networks:
            - library-network
        restart: always
        deploy:
            mode: replicated
            replicas: 1
        environment:
            - AUTH_SERVICE_URL=auth_service:50051
            - USER_SERVICE_URL=user_service:50051
            - BOOK_SERVICE_URL=book_service:50051
            - AUTHOR_SERVICE_URL=author_service:50051
            - CATEGORY_SERVICE_URL=category_service:50051

    book-service:
        build:
            context: ./../book_service
        networks:
            - library-network
        depends_on:
            - book-db
        restart: always
        deploy:
            mode: replicated
            replicas: 1
        environment:
            DSN: "host=book-db port=5432 user=fikri password=12345678 dbname=bookdb sslmode=disable timezone=Asia/Jakarta connect_timeout=5"
            GRPC_PORT: "50051"

    author-service:
        build:
            context: ./../author_service
        networks:
            - library-network
        depends_on:
            - author-db
        restart: always
        deploy:
            mode: replicated
            replicas: 1
        environment:
            DSN: "host=author-db port=5432 user=fikri password=12345678 dbname=authordb sslmode=disable timezone=Asia/Jakarta connect_timeout=5"
            GRPC_PORT: "50051"

    category-service:
        build:
            context: ./../category_service
        networks:
            - library-network
        depends_on:
            - category-db
        restart: always
        deploy:
            mode: replicated
            replicas: 1
        environment:
            DSN: "host=category-db port=5432 user=fikri password=12345678 dbname=categorydb sslmode=disable timezone=Asia/Jakarta connect_timeout=5"
            GRPC_PORT: "50051"

    user-service:
        build:
            context: ./../user_service
        networks:
            - library-network
        depends_on:
            - user-db
        restart: always
        deploy:
            mode: replicated
            replicas: 1
        environment:
            DSN: "host=user-db port=5432 user=fikri password=12345678 dbname=userdb sslmode=disable timezone=Asia/Jakarta connect_timeout=5"

    auth-service:
        build:
            context: ./../auth_service
        networks:
            - library-network
        depends_on:
            - user-db
        restart: always
        deploy:
            mode: replicated
            replicas: 1
        environment:
            DSN: "host=user-db port=5432 user=fikri password=12345678 dbname=userdb sslmode=disable timezone=Asia/Jakarta connect_timeout=5"
            REDIS_HOST: "redis"
            REDIS_PASSWORD: "mypasswordtralala"
            REDIS_PORT: "6379"
            GRPC_PORT: "50051"
            JWT_SECRET: "supersecretkeywjerjrqwowijfoqjfoaqjdoajflakjoewjroewijrwwoijoj"
            EMAIL_SENDER_CONTAINER_FILE: "/run/secrets/email_sender"
            EMAIL_PASSWORD_CONTAINER_FILE: "/run/secrets/email_password"
        secrets:
            - email_sender
            - email_password

    book-db:
        image: postgres:15
        ports:
            - "5433:5432"
        environment:
            POSTGRES_USER: fikri
            POSTGRES_PASSWORD: 12345678
            POSTGRES_DB: bookdb
            TZ: Asia/Jakarta

        networks:
            - library-network
        restart: always
        deploy:
            mode: replicated
            replicas: 1
        volumes:
            - book-db-data:/var/lib/postgresql/data
            - ./sql/book-init.sql:/docker-entrypoint-initdb.d/init.sql
            - ./sql/book-seeder.sql:/docker-entrypoint-initdb.d/seeder.sql

    author-db:
        image: postgres:15
        ports:
            - "5434:5432"
        environment:
            POSTGRES_USER: fikri
            POSTGRES_PASSWORD: 12345678
            POSTGRES_DB: authordb
            TZ: Asia/Jakarta

        networks:
            - library-network
        restart: always
        deploy:
            mode: replicated
            replicas: 1
        volumes:
            - author-db-data:/var/lib/postgresql/data
            - ./sql/author-init.sql:/docker-entrypoint-initdb.d/init.sql
            - ./sql/author-seeder.sql:/docker-entrypoint-initdb.d/seeder.sql

    category-db:
        image: postgres:15
        ports:
            - "5435:5432"
        environment:
            POSTGRES_USER: fikri
            POSTGRES_PASSWORD: 12345678
            POSTGRES_DB: categorydb
            TZ: Asia/Jakarta

        networks:
            - library-network
        restart: always
        deploy:
            mode: replicated
            replicas: 1
        volumes:
            - category-db-data:/var/lib/postgresql/data
            - ./sql/category-init.sql:/docker-entrypoint-initdb.d/init.sql
            - ./sql/category-seeder.sql:/docker-entrypoint-initdb.d/seeder.sql

    user-db:
        image: postgres:15
        ports:
            - "5436:5432"
        environment:
            POSTGRES_USER: fikri
            POSTGRES_PASSWORD: 12345678
            POSTGRES_DB: userdb
            TZ: Asia/Jakarta

        networks:
            - library-network
        restart: always
        deploy:
            mode: replicated
            replicas: 1
        volumes:
            - user-db-data:/var/lib/postgresql/data
            - ./sql/user-init.sql:/docker-entrypoint-initdb.d/init.sql
            - ./sql/user-seeder.sql:/docker-entrypoint-initdb.d/seeder.sql

    redis:
        image: redis:7.4.1-alpine
        networks:
            - library-network
        restart: always
        deploy:
            mode: replicated
            replicas: 1
        command: ["redis-server", "--requirepass", "mypasswordtralala"]

networks:
    library-network:
        driver: bridge

volumes:
    book-db-data:
    author-db-data:
    category-db-data:
    user-db-data:

secrets:
    email_sender:
        file: ./secrets/email_sender.secret
    email_password:
        file: ./secrets/email_password.secret
