syntax = "proto3";

package author_service;

option go_package = "/author_service";

import "validate/validate.proto";

service AuthorService {
  rpc CreateAuthor(CreateAuthorRequest) returns (CreateAuthorResponse);
  rpc GetAuthor(GetAuthorRequest) returns (GetAuthorResponse);
  rpc ListAuthors(ListAuthorsRequest) returns (ListAuthorsResponse);
  rpc UpdateAuthor(UpdateAuthorRequest) returns (UpdateAuthorResponse);
  rpc DeleteAuthor(DeleteAuthorRequest) returns (DeleteAuthorResponse);
}

message Author {
  string id = 1;
  string name = 2;
  string biography = 3;
  int64 createdAt = 4; // unix time
  int64 updatedAt = 5; // unit time
}

message CreateAuthorRequest {
  string name = 1 [(validate.rules).string.min_len = 3];
  string biography = 2 [(validate.rules).string.min_len = 1];
}

message CreateAuthorResponse {
  Author author = 1;
}

message GetAuthorRequest {
  string id = 1 [(validate.rules).string.min_len = 1];  // ID must not be empty
}

message GetAuthorResponse {
  Author author = 1;
}

message ListAuthorsRequest {
  int32 page = 1 [(validate.rules).int32.gte = 1];  // Page must be >= 1
  int32 pageSize = 2 [(validate.rules).int32.gte = 1];  // Page size must be >= 1
}

message ListAuthorsResponse {
  repeated Author authors = 1;
  int32 totalItems = 2;  // Total number of items
  int32 totalPages = 3;  // Total number of pages
}

message UpdateAuthorRequest {
  string id = 1 [(validate.rules).string.min_len = 1];  // ID must not be empty
  string name = 2 [(validate.rules).string.min_len = 3];
  string biography = 3 [(validate.rules).string.min_len = 1];
}

message UpdateAuthorResponse {
  Author author = 1;
}

message DeleteAuthorRequest {
  string id = 1 [(validate.rules).string.min_len = 1];  // ID must not be empty
}

message DeleteAuthorResponse {
  string message = 1;
}
