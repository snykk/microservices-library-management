syntax = "proto3";

package category_service;

option go_package = "/category_service";

import "validate/validate.proto";

service CategoryService {
  rpc CreateCategory(CreateCategoryRequest) returns (CreateCategoryResponse);
  rpc GetCategory(GetCategoryRequest) returns (GetCategoryResponse);
  rpc ListCategories(ListCategoriesRequest) returns (ListCategoriesResponse);
  rpc UpdateCategory(UpdateCategoryRequest) returns (UpdateCategoryResponse);
  rpc DeleteCategory(DeleteCategoryRequest) returns (DeleteCategoryResponse);
}

message Category {
  string id = 1;
  string name = 2;
  int64 createdAt = 3; // unix time
  int64 updatedAt = 4; // unit time
}

message CreateCategoryRequest {
  string name = 1 [(validate.rules).string.min_len = 3];  // Name must not be empty
}

message CreateCategoryResponse {
  Category category = 1;
}

message GetCategoryRequest {
  string id = 1 [(validate.rules).string.min_len = 1];  // ID must not be empty
}

message GetCategoryResponse {
  Category category = 1;
}

message ListCategoriesRequest {
  int32 page = 1 [(validate.rules).int32.gte = 1];  // Page must be >= 1
  int32 pageSize = 2 [(validate.rules).int32.gte = 1];  // Page size must be >= 1
}

message ListCategoriesResponse {
  repeated Category categories = 1;
  int32 totalItems = 2;  // Total number of items
  int32 totalPages = 3;  // Total number of pages
}

message UpdateCategoryRequest {
  string id = 1 [(validate.rules).string.min_len = 1];  // ID must not be empty
  string name = 2 [(validate.rules).string.min_len = 3];  // Name must not be empty
}

message UpdateCategoryResponse {
  Category category = 1;
}

message DeleteCategoryRequest {
  string id = 1 [(validate.rules).string.min_len = 1];  // ID must not be empty
}

message DeleteCategoryResponse {
  string message = 1;
}
