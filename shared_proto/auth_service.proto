syntax = "proto3";

package auth_service;

option go_package = "/auth_service";

import "validate/validate.proto";

service AuthService {
    rpc Register (RegisterRequest) returns (RegisterResponse);
    rpc VerifyEmail (VerifyEmailRequest) returns (VerifyEmailResponse);
    rpc Login (LoginRequest) returns (LoginResponse);
    rpc ValidateToken (ValidateTokenRequest) returns (ValidateTokenResponse);
    rpc Logout (LogoutRequest) returns (LogoutResponse);
    rpc SendOTP (SendOTPRequest) returns (SendOTPResponse);
}

message User {
    string id = 1;
    string email = 2;
    string username = 3;
    string password = 4;
    bool verified = 5;
    string role = 6;
    int64 createdAt = 7; // unix time
    int64 updatedAt = 8; // unit time
}

message RegisterRequest {
    string email = 1 [(validate.rules).string.min_len = 1, (validate.rules).string.email = true];
    string username = 2 [(validate.rules).string.min_len = 3];  // Minimal length for username
    string password = 3 [(validate.rules).string.min_len = 4];  // Minimal length for password
}

message RegisterResponse {
    User user = 1;
}

message VerifyEmailRequest {
    string email = 1 [(validate.rules).string.min_len = 1, (validate.rules).string.email = true];
    string otp = 2 [(validate.rules).string.min_len = 1];  // OTP must not be empty
}

message VerifyEmailResponse {
    string message = 1;
}

message LoginRequest {
    string email = 1 [(validate.rules).string.email = true];
    string password = 2 [(validate.rules).string.min_len = 4]; // Minimal length for password
}

message LoginResponse {
    string accessToken = 1;
    string refreshToken = 2;
    string message = 3;
}

message ValidateTokenRequest {
    string token = 1 [(validate.rules).string.min_len = 1];  // Token must not be empty
}

message ValidateTokenResponse {
    bool valid = 1;
    string userId = 2;
    string role = 3;
    string email = 4;
}

message LogoutRequest {
    string userId = 1 [(validate.rules).string.min_len = 1];
}

message LogoutResponse {
    string message = 1;
}

message SendOTPRequest {
    string email = 1 [(validate.rules).string.email = true];  // Email must be valid
}

message SendOTPResponse {
    string message = 1;
}
