// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: loan_service.proto

package loan_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Loan with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Loan) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Loan with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LoanMultiError, or nil if none found.
func (m *Loan) ValidateAll() error {
	return m.validate(true)
}

func (m *Loan) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for BookId

	// no validation rules for LoanDate

	// no validation rules for ReturnDate

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return LoanMultiError(errors)
	}

	return nil
}

// LoanMultiError is an error wrapping multiple validation errors returned by
// Loan.ValidateAll() if the designated constraints aren't met.
type LoanMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoanMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoanMultiError) AllErrors() []error { return m }

// LoanValidationError is the validation error returned by Loan.Validate if the
// designated constraints aren't met.
type LoanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoanValidationError) ErrorName() string { return "LoanValidationError" }

// Error satisfies the builtin error interface
func (e LoanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoan.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoanValidationError{}

// Validate checks the field values on CreateLoanRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateLoanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLoanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLoanRequestMultiError, or nil if none found.
func (m *CreateLoanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLoanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := CreateLoanRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBookId()) < 1 {
		err := CreateLoanRequestValidationError{
			field:  "BookId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := CreateLoanRequestValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CreateLoanRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateLoanRequestMultiError(errors)
	}

	return nil
}

func (m *CreateLoanRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateLoanRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateLoanRequestMultiError is an error wrapping multiple validation errors
// returned by CreateLoanRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateLoanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLoanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLoanRequestMultiError) AllErrors() []error { return m }

// CreateLoanRequestValidationError is the validation error returned by
// CreateLoanRequest.Validate if the designated constraints aren't met.
type CreateLoanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLoanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLoanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLoanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLoanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLoanRequestValidationError) ErrorName() string {
	return "CreateLoanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLoanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLoanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLoanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLoanRequestValidationError{}

// Validate checks the field values on ReturnLoanRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReturnLoanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnLoanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnLoanRequestMultiError, or nil if none found.
func (m *ReturnLoanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnLoanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := ReturnLoanRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := ReturnLoanRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = ReturnLoanRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReturnDate() < 0 {
		err := ReturnLoanRequestValidationError{
			field:  "ReturnDate",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReturnLoanRequestMultiError(errors)
	}

	return nil
}

func (m *ReturnLoanRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *ReturnLoanRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// ReturnLoanRequestMultiError is an error wrapping multiple validation errors
// returned by ReturnLoanRequest.ValidateAll() if the designated constraints
// aren't met.
type ReturnLoanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnLoanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnLoanRequestMultiError) AllErrors() []error { return m }

// ReturnLoanRequestValidationError is the validation error returned by
// ReturnLoanRequest.Validate if the designated constraints aren't met.
type ReturnLoanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnLoanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnLoanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnLoanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnLoanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnLoanRequestValidationError) ErrorName() string {
	return "ReturnLoanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnLoanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnLoanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnLoanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnLoanRequestValidationError{}

// Validate checks the field values on GetLoanRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLoanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLoanRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetLoanRequestMultiError,
// or nil if none found.
func (m *GetLoanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLoanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetLoanRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetLoanRequestMultiError(errors)
	}

	return nil
}

// GetLoanRequestMultiError is an error wrapping multiple validation errors
// returned by GetLoanRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLoanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLoanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLoanRequestMultiError) AllErrors() []error { return m }

// GetLoanRequestValidationError is the validation error returned by
// GetLoanRequest.Validate if the designated constraints aren't met.
type GetLoanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLoanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLoanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLoanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLoanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLoanRequestValidationError) ErrorName() string { return "GetLoanRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetLoanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLoanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLoanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLoanRequestValidationError{}

// Validate checks the field values on UpdateLoanStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLoanStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLoanStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLoanStatusRequestMultiError, or nil if none found.
func (m *UpdateLoanStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLoanStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateLoanStatusRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStatus()) < 1 {
		err := UpdateLoanStatusRequestValidationError{
			field:  "Status",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReturnDate() < 0 {
		err := UpdateLoanStatusRequestValidationError{
			field:  "ReturnDate",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateLoanStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateLoanStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateLoanStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateLoanStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLoanStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLoanStatusRequestMultiError) AllErrors() []error { return m }

// UpdateLoanStatusRequestValidationError is the validation error returned by
// UpdateLoanStatusRequest.Validate if the designated constraints aren't met.
type UpdateLoanStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLoanStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLoanStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLoanStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLoanStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLoanStatusRequestValidationError) ErrorName() string {
	return "UpdateLoanStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLoanStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLoanStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLoanStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLoanStatusRequestValidationError{}

// Validate checks the field values on ListUserLoansRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserLoansRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserLoansRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserLoansRequestMultiError, or nil if none found.
func (m *ListUserLoansRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserLoansRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := ListUserLoansRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() < 1 {
		err := ListUserLoansRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 1 {
		err := ListUserLoansRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListUserLoansRequestMultiError(errors)
	}

	return nil
}

// ListUserLoansRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserLoansRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserLoansRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserLoansRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserLoansRequestMultiError) AllErrors() []error { return m }

// ListUserLoansRequestValidationError is the validation error returned by
// ListUserLoansRequest.Validate if the designated constraints aren't met.
type ListUserLoansRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserLoansRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserLoansRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserLoansRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserLoansRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserLoansRequestValidationError) ErrorName() string {
	return "ListUserLoansRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserLoansRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserLoansRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserLoansRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserLoansRequestValidationError{}

// Validate checks the field values on ListLoansRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListLoansRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLoansRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLoansRequestMultiError, or nil if none found.
func (m *ListLoansRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLoansRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListLoansRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 1 {
		err := ListLoansRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListLoansRequestMultiError(errors)
	}

	return nil
}

// ListLoansRequestMultiError is an error wrapping multiple validation errors
// returned by ListLoansRequest.ValidateAll() if the designated constraints
// aren't met.
type ListLoansRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLoansRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLoansRequestMultiError) AllErrors() []error { return m }

// ListLoansRequestValidationError is the validation error returned by
// ListLoansRequest.Validate if the designated constraints aren't met.
type ListLoansRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoansRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoansRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoansRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoansRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoansRequestValidationError) ErrorName() string { return "ListLoansRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListLoansRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoansRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoansRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoansRequestValidationError{}

// Validate checks the field values on LoanResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoanResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoanResponseMultiError, or
// nil if none found.
func (m *LoanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLoan()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoanResponseValidationError{
					field:  "Loan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoanResponseValidationError{
					field:  "Loan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLoan()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoanResponseValidationError{
				field:  "Loan",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoanResponseMultiError(errors)
	}

	return nil
}

// LoanResponseMultiError is an error wrapping multiple validation errors
// returned by LoanResponse.ValidateAll() if the designated constraints aren't met.
type LoanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoanResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoanResponseMultiError) AllErrors() []error { return m }

// LoanResponseValidationError is the validation error returned by
// LoanResponse.Validate if the designated constraints aren't met.
type LoanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoanResponseValidationError) ErrorName() string { return "LoanResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoanResponseValidationError{}

// Validate checks the field values on ListLoansResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListLoansResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLoansResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLoansResponseMultiError, or nil if none found.
func (m *ListLoansResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLoansResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetLoans()) < 1 {
		err := ListLoansResponseValidationError{
			field:  "Loans",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetLoans() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLoansResponseValidationError{
						field:  fmt.Sprintf("Loans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLoansResponseValidationError{
						field:  fmt.Sprintf("Loans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLoansResponseValidationError{
					field:  fmt.Sprintf("Loans[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalItems

	// no validation rules for TotalPages

	if len(errors) > 0 {
		return ListLoansResponseMultiError(errors)
	}

	return nil
}

// ListLoansResponseMultiError is an error wrapping multiple validation errors
// returned by ListLoansResponse.ValidateAll() if the designated constraints
// aren't met.
type ListLoansResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLoansResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLoansResponseMultiError) AllErrors() []error { return m }

// ListLoansResponseValidationError is the validation error returned by
// ListLoansResponse.Validate if the designated constraints aren't met.
type ListLoansResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoansResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoansResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoansResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoansResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoansResponseValidationError) ErrorName() string {
	return "ListLoansResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLoansResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoansResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoansResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoansResponseValidationError{}

// Validate checks the field values on GetUserLoansByStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserLoansByStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserLoansByStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserLoansByStatusRequestMultiError, or nil if none found.
func (m *GetUserLoansByStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserLoansByStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetUserLoansByStatusRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStatus()) < 1 {
		err := GetUserLoansByStatusRequestValidationError{
			field:  "Status",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() < 1 {
		err := GetUserLoansByStatusRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 1 {
		err := GetUserLoansByStatusRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserLoansByStatusRequestMultiError(errors)
	}

	return nil
}

// GetUserLoansByStatusRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserLoansByStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserLoansByStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserLoansByStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserLoansByStatusRequestMultiError) AllErrors() []error { return m }

// GetUserLoansByStatusRequestValidationError is the validation error returned
// by GetUserLoansByStatusRequest.Validate if the designated constraints
// aren't met.
type GetUserLoansByStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserLoansByStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserLoansByStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserLoansByStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserLoansByStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserLoansByStatusRequestValidationError) ErrorName() string {
	return "GetUserLoansByStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserLoansByStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserLoansByStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserLoansByStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserLoansByStatusRequestValidationError{}

// Validate checks the field values on GetLoansByStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLoansByStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLoansByStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLoansByStatusRequestMultiError, or nil if none found.
func (m *GetLoansByStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLoansByStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetStatus()) < 1 {
		err := GetLoansByStatusRequestValidationError{
			field:  "Status",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() < 1 {
		err := GetLoansByStatusRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 1 {
		err := GetLoansByStatusRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetLoansByStatusRequestMultiError(errors)
	}

	return nil
}

// GetLoansByStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetLoansByStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLoansByStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLoansByStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLoansByStatusRequestMultiError) AllErrors() []error { return m }

// GetLoansByStatusRequestValidationError is the validation error returned by
// GetLoansByStatusRequest.Validate if the designated constraints aren't met.
type GetLoansByStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLoansByStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLoansByStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLoansByStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLoansByStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLoansByStatusRequestValidationError) ErrorName() string {
	return "GetLoansByStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLoansByStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLoansByStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLoansByStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLoansByStatusRequestValidationError{}
