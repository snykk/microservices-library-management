syntax = "proto3";

package loan_service;

option go_package = "/loan_service";

import "validate/validate.proto";

service LoanService {
    rpc CreateLoan(CreateLoanRequest) returns (LoanResponse);
    rpc ReturnLoan(ReturnLoanRequest) returns (LoanResponse);
    rpc GetLoan(GetLoanRequest) returns (LoanResponse);
    rpc UpdateLoanStatus(UpdateLoanStatusRequest) returns (LoanResponse);
    rpc ListUserLoans(ListUserLoansRequest) returns (ListLoansResponse);
    rpc ListLoans(ListLoansRequest) returns (ListLoansResponse); // Admin purpose
    rpc GetUserLoansByStatus(GetUserLoansByStatusRequest) returns (ListLoansResponse);
    rpc GetLoansByStatus(GetLoansByStatusRequest) returns (ListLoansResponse);
}

// Loan message to represent loan data
message Loan {
    string id = 1;
    string user_id = 2;
    string book_id = 3;
    int64 loan_date = 4;   // unix time
    int64 return_date = 5; // unix time
    string status = 6;     // Loan status (e.g., BORROWED, RETURNED, LOST)
    int64 createdAt = 7;   // unix time
    int64 updatedAt = 8;   // unit time
}

message CreateLoanRequest {
    string user_id = 1 [(validate.rules).string.min_len = 1];      // User ID must be non-empty
    string book_id = 2 [(validate.rules).string.min_len = 1];      // Book ID must be non-empty
    string email = 3 [(validate.rules).string.min_len = 1, (validate.rules).string.email = true]; // Must be a valid email address
}

message ReturnLoanRequest {
    string id = 1 [(validate.rules).string.min_len = 1];           // ID must be non-empty
    string user_id = 2 [(validate.rules).string.min_len = 1];      // User ID must be non-empty
    string email = 3 [(validate.rules).string.email = true];       // Must be a valid email address
    int64 return_date = 4 [(validate.rules).int64.gte = 0];        // Return date must be >= 0
}

message GetLoanRequest {
    string id = 1 [(validate.rules).string.min_len = 1];           // ID must be non-empty
}

message UpdateLoanStatusRequest {
    string id = 1 [(validate.rules).string.min_len = 1];           // ID must be non-empty
    string status = 2 [(validate.rules).string.min_len = 1];       // Status must be non-empty
    int64 return_date = 3 [(validate.rules).int64.gte = 0];        // Return date must be >= 0
}

message ListUserLoansRequest {
    string user_id = 1 [(validate.rules).string.min_len = 1];      // User ID must be non-empty
}

message ListLoansRequest {}

message LoanResponse {
    Loan loan = 1;
}

message ListLoansResponse {
    repeated Loan loans = 1 [(validate.rules).repeated.min_items = 1]; // Must contain at least one loan
}

message GetUserLoansByStatusRequest {
    string user_id = 1 [(validate.rules).string.min_len = 1];      // User ID must be non-empty
    string status = 2 [(validate.rules).string.min_len = 1];       // Status must be non-empty
}

message GetLoansByStatusRequest {
    string status = 1 [(validate.rules).string.min_len = 1];       // Status must be non-empty
}